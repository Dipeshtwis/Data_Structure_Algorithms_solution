#Question

Connected Components
Are all the components connected on the given Graph?

A graph is considered one connected component if every node is connected along a path with every other node.

The following graph is not one connected component, since the 1 and 4 cannot be reached from the 0,2,3 and 5.
Challenge
Given a graph, return true if the graph is one connected component, and false otherwise.
By using a search algorithm (BFS/DFS), you can traverse through the entire graph and save visited nodes. If you visited all nodes listed in the original graph, it means that all of them are connected.

Example

graph = {
  0 => [2], 
  1 => [4], 
  2 => [0, 5, 3], 
  3 => [5, 2], 
  4 => [5, 1], 
  5 => [4, 2, 3]
}
puts connected_graph?(graph)
# => true

#Solution

#Ruby

def connected_graph?(graph)
  discovered = Array.new(graph.keys.length, false)
  queue = []
  path = []
  queue.push(0)
  discovered[0] = true
  
  until queue.empty?
    current = queue.shift
    path.push(current)
    
    graph[current].each do |i|
      unless discovered[i]
        queue.push(i)
        discovered[i] = true
      end
    end
  end
  
  graph.keys.length.times do |i|
     return false unless path.include?(i)
  end
  true
end

#Ruby (Model solution)

def depth_first_search(graph)
  # write your code here
  result = []
  stack = [0]
  visited = []
  
  while stack.size != 0
    head = stack.pop
    result << head
    visited << head
    
    not_visited = graph[head].reject { |node| visited.include? node }
    
    visited += not_visited
    stack += not_visited.reverse
  end
  
  result
end

def connected_graph?(graph)
  # write your code here
  graph.keys.size == depth_first_search(graph).size
end
