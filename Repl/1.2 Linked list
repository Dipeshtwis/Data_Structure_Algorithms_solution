#problem

Implement the following two methods in your own LinkedList class. You should start with your code from yesterday:  

    add_at(index, item) - Add an item to a specific location in the list. The index will be a positive integer that represents the index where you should insert item. Zero is the position of the first element of the list. 
    remove(index) - Remove an item from a specific location in the List.  


You should also implement a private helper method get_node(index) to return the Node at a specific index.  

You should have already completed these two methods in the previous challenge:  

    add(number) - Add number to the end of your LinkedList. 
    get(index) - Get the number located at index.  





#sol

# Start with your code from last challenge.
class Node
  attr_accessor :value, :next_node
  def initialize(value, next_node = nil)
    @value = value
    @next_node = next_node
  end
end
class LinkedList
  #setup head and tail
  attr_accessor :head, :tail, :current_size
  def initialize
      @head = nil
      @tail = nil
      @current_size = 0
  end
  def add(number)
    this_node = Node.new(number)
    if @head.nil?
      @head = this_node
      @tail = this_node
      @current_size += 1
      return
    end
    if @head == @tail
      @tail.next_node = this_node
      @tail = this_node
      @current_size += 1
      return
    end
    
    @tail.next_node = this_node
    @tail = this_node
    @current_size += 1
  end
  
  def add_at(index, number)
    this_node = Node.new(number)
    if index ===0 and @head.nil?
      @head = this_node
      @tail = this_node
      @current_size += 1
      return
    elsif index == 0 and @head != nil
      this_node.next_node = @head
      @head = this_node
      @current_size += 1
      return
    elsif index == current_size - 1 
      @tail.next_node = this_node
      @tail = this_node
      @current_size += 1
      return
    else
     current = @head.next_node
      i = 1
      until i == index
        i += 1
        current = current.next_node
      end
      this_node.next_node = current.next_node
      current.next_node = this_node
      @current_size += 1
    end
  end
  
  def get(index)
    if index == 0
      return @head.value
    elsif index == current_size - 1
      return @tail.value
    else
      current = @head.next_node
      i = 1
      while current.next_node != nil
        return current.value if i == index
        i += 1
        current = current.next_node
      end
      -1
    end
  end
  
  def remove(index)
    
  end
  
  private
  
  def get_node
    
  end
end


list = LinkedList.new

list.add(3)
list.add(5)
list.add_at(1, 11)
list.add_at(0, 13)

puts list.get(2)
# => 11

puts list.get(3)
# => 5
